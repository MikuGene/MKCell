gc()
source("https://raw.githubusercontent.com/MikuGene/MKCell/master/MKCell_Func.R?token=AJSVTV6Y64S2OVPF52NDAOC7BEH4K")
source("https://raw.githubusercontent.com/MikuGene/MKCell/master/MKCell_Func.R?token=AJSVTV6Y64S2OVPF52NDAOC7BEH4K")
source("https://raw.githubusercontent.com/MikuGene/MKCell/master/MKCell_Func.R?token=AJSVTV6Y64S2OVPF52NDAOC7BEH4K")
source("https://raw.githubusercontent.com/MikuGene/MKCell/master/MKCell_Func.R?token=AJSVTV6Y64S2OVPF52NDAOC7BEH4K")
## Download MF ##
DW <- read.table("D:/Hatsune/Downlink.txt")
View(DW)
Download <- function(x,sleep = 2,outdir = "E:/temp/",name = names(x)){
for (i in 1:length(x)) {
write.csv(c("ok"),"Erro.csv",row.names = F)
tryCatch(download.file(as.character(x[i]),destfile = paste0(outdir,as.character(name)[i]),quiet = T,cacheOK = T,method = "libcurl"),
error = function(e){write.csv(c("haha"),"Erro.csv",row.names = F)
cat(i,"Download Failed for",as.character(name)[i],"\n",file = stderr())})
Erro <- as.character(read.csv("Erro.csv",header = T)[1,])
if(Erro == "ok"){cat(i,"Download OK for",as.character(name)[i],"\n",file = stderr())}
while (Erro == "haha") {
write.csv(c("ok"),"Erro.csv",row.names = F)
tryCatch(download.file(as.character(x[i]),destfile = paste0(outdir,as.character(name)[i]),quiet = T,cacheOK = T,method = "libcurl"),
error = function(e){write.csv(c("haha"),"Erro.csv",row.names = F)
cat(i,"Download Failed for",as.character(name)[i],"\n",file = stderr())})
Erro <- as.character(read.csv("Erro.csv",header = T)[1,])
if(Erro == "ok"){cat(i,"Download OK for",as.character(name)[i],"\n",file = stderr())}
Sys.sleep(sleep)}}
Sys.sleep(0.5)}
##
Download(DW$V1,name = 1:nrow(DW))
Download(DW$V1,name = 1:nrow(DW),outdir = "D:/temp/")
warnings()
Download(DW$V1,name = 1:nrow(DW),outdir = "D:/MikuFTP/")
## Download MF ##
DW <- read.table("D:/Hatsune/Downlink.txt")
Download <- function(x,sleep = 2,outdir = "E:/temp/",name = names(x)){
for (i in 1:length(x)) {
write.csv(c("ok"),"Erro.csv",row.names = F)
tryCatch(download.file(as.character(x[i]),destfile = paste0(outdir,as.character(name)[i]),quiet = T,cacheOK = T,method = "libcurl"),
error = function(e){write.csv(c("haha"),"Erro.csv",row.names = F)
cat(i,"Download Failed for",as.character(name)[i],"\n",file = stderr())})
Erro <- as.character(read.csv("Erro.csv",header = T)[1,])
if(Erro == "ok"){cat(i,"Download OK for",as.character(name)[i],"\n",file = stderr())}
while (Erro == "haha") {
write.csv(c("ok"),"Erro.csv",row.names = F)
tryCatch(download.file(as.character(x[i]),destfile = paste0(outdir,as.character(name)[i]),quiet = T,cacheOK = T,method = "libcurl"),
error = function(e){write.csv(c("haha"),"Erro.csv",row.names = F)
cat(i,"Download Failed for",as.character(name)[i],"\n",file = stderr())})
Erro <- as.character(read.csv("Erro.csv",header = T)[1,])
if(Erro == "ok"){cat(i,"Download OK for",as.character(name)[i],"\n",file = stderr())}
Sys.sleep(sleep)}}
Sys.sleep(0.5)}
Download(DW$V1,name = 1:nrow(DW),outdir = "D:/MikuFTP/")
packageVersion("Seurat")
install.packages("Seurat")
chooseCRANmirror()
install.packages("Seurat")
install.packages("Seurat")
install.packages("Seurat")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
install.packages("Seurat")
installed.packages("Seurat")
installed.packages("Seurat")
installed.packages("Seurat")
installed.packages("Seurat")
install.packages("Seurat")
install.packages("Seurat")
install.packages("Seurat")
Sys.which('make')
Sys.which('make')
installed.packages("seurat")
installed.packages("Seurat")
installed.packages("ggplot2")
install.packages("Seurat")
install.packages("Seurat")
chooseCRANmirror()
chooseCRANmirror()
install.packages("Seurat")
chooseCRANmirror()
install.packages("Seurat")
install.packages("seurat")
installr::updateR()
installr::updateR()
install.packages("Seurat")
a = readRDS("D:/MikuFTP/MK_SCC_backup.rds")
a@assays$RNA = NULL
a@assays$SCT@counts = NULL
a@assays$SCT@counts = matrix()
a@assays$SCT@scale.data = matrix()
gc()
a@graphs
b = a@graphs
View(b)
rm(b)
saveRDS(a,"MK_scc.rds")
rm(a)
gc()
date()
Sys.Date()
date()
write.csv("a",paste0(date(),".csv"))
gsub(":","",date())
?date( )
gc()
install.packages("Rsubread")
chooseCRANmirror()
chooseCRANmirror()
install.packages("Rsubread")
chooseBioCmirror()
BiocManager::install("Rsubread")
library(Rsubread)
？Rsubread::featureCounts()
？Rsubread::featureCount
？Rsubread::featureCounts
?Rsubread::featureCounts
library(Rsubread)
a = featureCounts("D:/Hatsune/Linux/scc447/Aligned.sortedByCoord.out.bam")
a
a
a$counts
a$annotation
b = a$counts
View(b)
c = a$annotation
View(c)
d = a$targets
e = a$stat
View(e)
aa = featureCounts("D:/Hatsune/Linux/scc447/Aligned.toTranscriptome.out.bam")
bb = aa$counts
View(bb)
cc = aa$annotation
View(cc)
dd = aa$targets
ee = aa$stat
View(ee)
aa = featureCounts("D:/Hatsune/Linux/scc447/Aligned.toTranscriptome.out.bam",annot.ext = "D:/Hatsune/Linux/HPV.gtf")
aa = featureCounts("D:/Hatsune/Linux/scc447/Aligned.toTranscriptome.out.bam",annot.ext = "D:/Hatsune/Linux/HPV.gtf",isGTFAnnotationFile = T)
aa = featureCounts("D:/Hatsune/Linux/scc447/Aligned.toTranscriptome.out.bam",annot.ext = "D:/Hatsune/Linux/HPV.gtf",isGTFAnnotationFile = T,GTF.featureType = "CDS")
a = aa$counts
View(a)
citation("Rsubread")
BiocManager::install("infercnv")
chooseBioCmirror()
chooseBioCmirror()
chooseBioCmirror()
BiocManager::install("infercnv")
BiocManager::install("infercnv",version = NA)
chooseCRANmirror()
install.packages("tidyverse")
citation("WGCNA")
source("~/MKCell_Func.R")
MK_Enrich()
install.packages("clusterProfiler")
install.packages("clusterProfiler")
install.packages("clusterProfiler")
chooseCRANmirror()
install.packages("clusterProfiler")
install.packages("clusterProfiler")
chooseBioCmirror()
chooseBioCmirror()
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
citation(clusterProfile)
library(clusterProfile)
library("clusterProfiler")
citation("clusterProfiler")
devtools::install_github("github/MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
library(MikuGene)
?MK_DEGs()
citation("limma")
install.packages("clusterProfile")
install.packages("ReactomePA")
BiocManager::install("ReactomePA")
install.packages("ggplot2")
install.packages("stringr")
install.packages("pathview")
BiocManager::install("pathview")
install.packages("limma")
BiocManager::install("limma")
install.packages("WGCNA")
install.packages("Biostrings")
BiocManager::install("Biostrings")
install.packages("Rsubread")
BiocManager::install("Rsubread")
install.packages("tidyverse")
devtools::install_github("MikuGene/")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
library(MikuGene)
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
devtools::install_github("MikuGene/MikuGene")
library(MikuGene)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 1)
View(a)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 6)
View(a)
grep("HPV", a[,1], value = T)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 7)
View(a)
grep("HPV", a[,1], value = T)
grep("gap", a[,1], value = T)
grep("Gap", a[,1], value = T)
grep("E6", a[,1], value = T)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 8)
View(a)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 1,skip = 8)
View(a)
a = read.csv("JZsc137L2_RSEC_MolsPerCell.csv",nrows = 1,skip = 6)
View(a)
grep("E6", colnames(a), value = T)
grep("NC", colnames(a), value = T)
grep("^NC", colnames(a), value = T)
grep("E7", colnames(a), value = T)
setwd('D:/Hatsune/MKmicro/BacRef2017/bacteria_ref/')
table(file.remove(list.files(),paste0(list.files(), ".gz")))
warnings()
setwd("~")
a = read.csv("D:/temp/JZsc137L2_RSEC_ReadsPerCell.csv", skip = 6)
a = t(read.csv("D:/temp/JZsc137L2_RSEC_ReadsPerCell.csv", skip = 6, row.names = 1))
library(MikuGene)
colnames(a)[1:5]
rownames(a)[1:5]
b = read.csv("D:/temp/JZsc137L2_RSEC_ReadsPerCell.csv",nrows = 1)
View(b)
a = t(read.csv("D:/temp/JZsc137L2_RSEC_ReadsPerCell.csv", row.names = 1))
a[1:3,1:3]
MK_scRNA
b = MK_scRNA(a)
FeaturePlot(b, "E6", order = T)
rownames(b)[nrow(b) - (0:5)]
rownames(b)[nrow(b) - (0:4)]
FeaturePlot(b, rownames(b)[nrow(b) - (0:4)], order = T, coord.fixed = T)
VlnPlot(b, rownames(b)[nrow(b) - (0:4)])
DimPlot(b,label = T)
## MK_SCC ##
rm(list = ls())
library(Rsubread)
download.file("https://raw.githubusercontent.com/MikuGene/MikuGene/main/R/MKCell_Func.R","1.R")
source("1.R")
library(Rserve)
install.packages("Rserve")
R.version
write.csv(R.version,"haha.csv")
as.character(R.version)
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf")
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t")
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", nrows = 5)
View(a)
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", nrows = 5, header = T)
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", nrows = 50, header = T)
a = t(a)
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", header = T, fill = T)
length(unique(a$Hugo_Symbol))
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", nrows = 100, header = T)
a = t(a)
a = read.table("D:/temp/TCGA.HNSC.varscan.5296cf00-4d8c-4db3-80d7-930a4b44f90d.DR-10.0.somatic.maf", sep = "\t", nrows = 100, header = T)
write.table(a, "SNV.txt", sep = "\t", row.names = F)
rm(a)
a = readRDS("backup/temp Oct151429572020_backup.rds")
DimPlot(a, label = T)
library(Seurat)
DimPlot(a, label = T)
a = readRDS("D:/Hatsune/MK-SCC/backup/temp Sep281434052020_backup.rds")
DimPlot(a, label = T)
a = readRDS("D:/Hatsune/MK-SCC/backup/SCC Oct190213542020_backup.rds")
DimPlot(a, label = T)
b = a@assays$RNA@counts[,a@active.ident %in% c(8, 2, 4)]
dim(b)
b = a@assays$RNA@counts[,a@active.ident %in% c(16, 21, 29)]
dim(b)
c= as.matrix(b)
b = a@assays$RNA@counts[,a@active.ident %in% c(31, 33, 37)]
dim(b)
c = as.matrix(b)
dim(c)
b = a@assays$RNA@counts[,a@active.ident %in% c(31, 37)]
c = as.matrix(b)
dim(b)
b = a@assays$RNA@counts[,a@active.ident %in% c(35, 43)]
dim(b)
c = as.matrix(b)
dim(a@assays$SCT@data)
b = a@assays$SCT@data[, a@active.ident %in% c(35, 43)]
c = as.matrix(b)
write.csv(c, "MKscRNAE1.csv", quote = F)
b = a@assays$SCT@counts[, a@active.ident %in% c(35, 43)]
dim(b)
c = as.matrix(b)
write.csv(c, "MKscRNAE1.csv", quote = F)
a = read.csv("MKscRNAE1.csv", header = T)
View(a)
Tb = read.csv("MKscRNAE1.csv", header = T)
Rown = Tb[,1]
if(sum(duplicated(Rown)) > nrow(Tb)/2){Rown = NULL}
while (sum(duplicated(Rown)) > 0) {Rown = ifelse(duplicated(Rown), paste0("D-",Rown), Rown)}
rownames(Tb) = Rown
Tb = Tb[,-1]
View(Tb)
rm(Rown)
write.table(c, "MKscRNAE1.txt", quote = F, sep = "\t")
a = read.table("MKscRNAE1.txt", header = T)
View(a)
rm(a)
a  = read.table("MKscRNAE1.txt", header = T)
View(a)
View(c)
a  = read.table("MKscRNAE1.txt", header = T, sep = "\t")
View(a)
a  = read.table("MKscRNAE1.txt", header = T, sep = "\t", row.names = F)
a  = read.table("MKscRNAE1.txt", header = T, sep = "\t", row.names = 0)
a  = read.table("MKscRNAE1.txt", header = T, sep = "\t", row.names = 0, fill = T)
c[1:5, 1:5]
Rown = rownames(c)
c = cbind(Rown, c)
c[1:5, 1:5]
c = as.matrix(b)
Gene = Rown
rm(Rown)
c = cbind(Gene, c)
c[1:5, 1:5]
write.table(c, "MKscRNAE1.txt", quote = F, sep = "\t", row.names = F)
a = read.table("MKscRNAE1.txt", sep = "\t")
a = read.table("MKscRNAE1.txt", sep = "\t", header = T)
View(a)
write.csv(c, "MKscRNAE1.csv", quote = F, row.names = F)
a = read.csv("MKscRNAE1.csv")
View(a)
Matrix::writeMM(c, "MKscRNAE1.mtx")
Matrix::writeMM(b, "MKscRNAE1.mtx")
a = Matrix::readMM("MKscRNAE1.mtx")
a[1:5, 1:5]
rownames(a)
a[1,1]
a@Dimnames
library(Matrix)
?wirteMM
?writeMM
rownames(b)
a = readHB("MKscRNAE1.mtx")
a = readMM("MKscRNAE1.mtx")
d = as(b, "dgTMatrix")
rownames(d)
colnames(d)
writeMM(d, "MKscRNAE1.mtx")
a = readMM("MKscRNAE1.mtx")
rownames(a)
colnames(a)
library(MikuGene)
library(Matrix)
a = readMM("C:/Documents and Settings/Administrator/Downloads/ScRNA.mtx")
a = MK_scRNA(a)
MK_scRNA <- function(x, name = NULL, Reso = 0.6, nGene = c(200, Inf), nVar = 3, Dim = 2, SCT = F, BatchRemove = F, Umap = T, Plot = F, Norm = T, save = T){
suppressMessages(library(Seurat))
if(is.null(name)){name = "temp"}
name = as.character(name)
if(any(is.null(colnames(x)))){
colnames(x) = 1:ncol(x)
}
if(any(is.null(rownames(x)))){
rownames(x) = 1:nrow(x)
}
## Creat Seurat v3.2 ##
x = CreateSeuratObject(x, name, min.features = nGene[1])
## If SCTransform ##
if(SCT){
x = SCTransform(x, verbose = Plot, variable.features.n = nVar*1000)
}else{
## Standard process ##
## Filter genes per cell ##
if(Plot){print(VlnPlot(x, c("nFeature_RNA", "nCount_RNA"), ncol = 2, pt.size = 0.2))}
x = x[, x$nFeature_RNA >= nGene[1] & x$nFeature_RNA <= nGene[2]]
## Normalize ##
if(Norm){x = NormalizeData(x, verbose = Plot)}
## Find varible ##
x = FindVariableFeatures(x, nfeatures = 1000*nVar)
if(Plot){print(LabelPoints(VariableFeaturePlot(x), points = head(VariableFeatures(x), 10), repel = T))}
## Scale data ##
x = ScaleData(x, features = rownames(x), verbose = Plot)
}
## Cluster ##
x = RunPCA(x, features = VariableFeatures(x), verbose = F)
x = x[, !duplicated(x@reductions$pca@cell.embeddings)]
if(BatchRemove){
## Harmony v1.0 ##
suppressMessages(library(harmony))
AData = ifelse(SCT, "SCT", "RNA")
x = RunHarmony(x, "orig.ident", max.iter.harmony = 20, max.iter.cluster = 50, assay.use = AData, verbose = Plot, plot_convergence = Plot)
}
## TSNE and UMAP ##
ARedu = ifelse(BatchRemove, "harmony", "pca")
x = RunTSNE(x, dims = 1:50, dim.embed = Dim, reduction = ARedu)
if(Umap){x = RunUMAP(x, dims = 1:50, n.components = Dim, reduction = ARedu, verbose = Plot)}
## SNN ##
x = FindNeighbors(x, dims = 1:50, reduction = ARedu, verbose = Plot)
x = FindClusters(x, resolution = Reso, verbose = Plot)
if(Plot){print(DimPlot(x, label = T, pt.size = 0.9))}
# Clear #
if(SCT){
x@assays$RNA = NULL
x@assays$SCT@counts = matrix()
}else{
x@assays$RNA@counts = matrix()
}
# Save #
if(save){
dir.create("backup")
saveRDS(x, paste0("backup/", name, "_backup.rds"))}
gc()
return(x)
}
b = MK_scRNA(a, SCT = T)
DimPlot(b)
Fty = "mtx"
any(Fty %in% c("txt", "csv")))
any(Fty %in% c("txt", "csv"))
FeaturePlot(b, c("CD3D", "MS4A1"), blend = T)
FeaturePlot(b, c("MALAT1", "ACTB"), blend = T)
rownames(b)
FeaturePlot(b, c("1309", "1312"), blend = T)
setwd("D:\MKCell\MKCell\WebContent\eg")
setwd("D:\\MKCell\\MKCell\\WebContent\\eg")
a = read.table("ScpExample.txt", header = T, sep = "\t", row.names = 1)
View(a)
colnames(a) = paste0("Ex", 1:ncol(a))
colnames(a)[1:5]
View(a)
a = read.table("ScpExample.txt", header = T, sep = "\t")
colnames(a) = paste0("Ex", 0:(ncol(a) - 1))
View(a)
colnames(a)[1] = "Gene"
View(a)
write.table(a, "ScpExample.txt", sep = "\t", row.names = F, quote = F)
